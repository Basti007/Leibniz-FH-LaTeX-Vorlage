% This file was created with Citavi 6.14.4.0

@proceedings{Amaral.2019,
 year = {2019},
 title = {Proceedings of the 28th International Conference on Compiler Construction},
 address = {New York},
 publisher = {ACM},
 isbn = {9781450362771},
 editor = {Amaral, J. Nelson and Kulkarni, Milind},
 doi = {10.1145/3302516}
}


@book{Barnes.2022,
 author = {Barnes, John},
 year = {2022},
 title = {Programming in Ada 2012: With a preview of Ada 2022},
 address = {Cambridge and New York},
 edition = {2. Aufl.},
 publisher = {{Cambridge University Press}},
 isbn = {978-1-00-918134-1}
}


@book{Barr.1999,
 author = {Barr, Michael},
 year = {1999},
 title = {Programming embedded systems in C and C++: Thinking inside the box},
 price = {DM 60.00},
 address = {Beijing},
 publisher = {O'Reilly},
 isbn = {978-1565923546}
}


@book{Bergin.1996,
 year = {1996},
 title = {History of programming languages II: Second ACM SIGPLAN History of Programming Languages Conference (HOPL-II), April 20 - 23, 1993, Cambridge, Massachusetts},
 address = {New York},
 publisher = {{Addison-Wesley Professional}},
 isbn = {0201895021},
 editor = {Bergin, Thomas J. and Gibson, Richard G.},
 doi = {10.1145/234286}
}


@article{Chatzigeorgiou.2003,
 author = {Chatzigeorgiou, Alexander},
 year = {2003},
 title = {Performance and power evaluation of C++ object-oriented programming in embedded processors},
 pages = {195--201},
 volume = {45},
 number = {4},
 issn = {09505849},
 journal = {Information and Software Technology},
 doi = {10.1016/S0950-5849(02)00205-7}
}


@article{Cho.2023,
 author = {Cho, Se Yeon and Delgado, Raimarius and Choi, Byoung Wook},
 year = {2023},
 title = {Feasibility Study for a Python-Based Embedded Real-Time Control System},
 pages = {1426},
 volume = {12},
 number = {6},
 journal = {Electronics},
 doi = {10.3390/electronics12061426},
 file = {Cho, Delgado et al. 2023 - Feasibility Study for a Python-Based:Attachments/Cho, Delgado et al. 2023 - Feasibility Study for a Python-Based.pdf:application/pdf}
}


@misc{cpp.cppfundamentaltypes,
 author = {cppreference.com},
 year = {2011},
 title = {Fundamental types},
 url = {https://en.cppreference.com/w/cpp/language/types},
 urldate = {2024-05-03}
}


@misc{cppreference.cfunctiondeclaration,
 author = {cppreference.com},
 year = {2015},
 title = {Function declarations},
 url = {https://en.cppreference.com/w/c/language/function_declaration},
 urldate = {2024-05-03}
}


@misc{cppreference.chistory.2024,
 author = {cppreference.com},
 year = {2012},
 title = {History of C},
 url = {https://en.cppreference.com/w/c/language/history},
 urldate = {2024-04-15}
}


@misc{cppreference.cmalloc,
 author = {cppreference.com},
 year = {2012},
 title = {malloc},
 url = {https://en.cppreference.com/w/c/memory/malloc},
 urldate = {2024-05-03}
}


@misc{cppreference.cppclassdeclaration,
 author = {cppreference.com},
 year = {2012},
 title = {Class declaration},
 url = {https://en.cppreference.com/w/cpp/language/class},
 urldate = {2024-05-03}
}


@misc{cppreference.cppdefaultarguments,
 author = {cppreference.com},
 year = {2014},
 title = {Default arguments},
 url = {https://en.cppreference.com/w/cpp/language/default_arguments},
 urldate = {2024-05-03}
}


@misc{cppreference.cppderivedclass,
 author = {cppreference.com},
 year = {2013},
 title = {Derived classes},
 url = {https://en.cppreference.com/w/cpp/language/derived_class},
 urldate = {2024-05-03}
}


@misc{cppreference.cpphistory.2024,
 author = {cppreference.com},
 year = {2011},
 title = {History of C++},
 url = {https://en.cppreference.com/w/cpp/language/history},
 urldate = {2024-04-30}
}


@misc{cppreference.cpplinkage,
 author = {cppreference.com},
 editor = {cppreference.com},
 year = {2013},
 title = {Language linkage},
 url = {https://en.cppreference.com/w/cpp/language/language_linkage},
 urldate = {2024-05-21}
}


@misc{cppreference.cppnew,
 author = {cppreference.com},
 year = {2011},
 title = {new expression},
 url = {https://en.cppreference.com/w/cpp/language/new},
 urldate = {2024-05-03}
}


@misc{cppreference.cstandardlib,
 author = {cppreference.com},
 year = {2012},
 title = {C Standard Library header files},
 url = {https://en.cppreference.com/w/c/header},
 urldate = {2024-05-22}
}


@misc{cppreference.cstruct,
 author = {cppreference.com},
 year = {2013},
 title = {Struct declaration},
 url = {https://en.cppreference.com/w/c/language/struct},
 urldate = {2024-05-03}
}


@misc{cppreference.ctype,
 author = {cppreference.com},
 year = {2014},
 title = {Type},
 url = {https://en.cppreference.com/w/c/language/type},
 urldate = {2024-05-03}
}


@misc{cppreference.ctypedef,
 author = {cppreference.com},
 year = {2014},
 title = {Typedef declaration},
 url = {https://en.cppreference.com/w/c/language/typedef},
 urldate = {2024-05-07}
}


@article{Duden.Prozedural,
 abstract = {Definition, Rechtschreibung, Synonyme und Grammatik von 'prozedural' auf Duden online nachschlagen. W{\"o}rterbuch der deutschen Sprache.},
 author = {Dudenredaktion},
 year = {o.Jahr},
 title = {Prozedural},
 urldate = {2024-04-30},
 journal = {Duden online}
}


@book{Duschl.2014,
 author = {Duschl, Dieter},
 year = {2014},
 title = {Softwareentwicklung mit C++: Einf{\"u}hrung mit Visual Studio 2012},
 price = {Pb. : EUR 34.99 (DE)},
 address = {Wiesbaden},
 publisher = {{Springer Vieweg}},
 isbn = {978-3-658-01585-5},
 doi = {10.1007/978-3-658-01586-2}
}


@misc{gcc.gnu,
 author = {{Free Software Foundation, Inc.}},
 editor = {{Free Software Foundation, Inc.}},
 year = {o.Jahr},
 title = {GCC, the GNU Compiler Collection - GNU Project},
 url = {https://gcc.gnu.org/},
 urldate = {2024-05-13}
}


@book{Gebhardt.2013,
 author = {Gebhardt, Vera},
 year = {2013},
 title = {Funktionale Sicherheit nach ISO 26262: Ein Praxisleitfaden zur Umsetzung},
 address = {Heidelberg},
 publisher = {dpunkt.verlag},
 isbn = {9783864913389}
}


@book{Gessler.2020,
 abstract = {Eingebettete Systeme -- Rechenmaschinen -- Grundlagen Hardware-Architekturen -- Eingebettete Architekturen: ARM -- Hardware-Software-Codesign -- Eingebettete Betriebssysteme -- Entwicklungs-Prozesse -- Entwurf auf Systemebene -- Implementierung -- Test -- Zahlensysteme und Arithmetik -- Auswahlkriterien -- Vergleichende Entwicklung -- Fallstudien -- Trends.



Das Buch liefert in Theorie und Praxis eine durchgehende und vollst{\"a}ndige Darstellung des Entwicklungs-Prozesses von Eingebetteten Systemen mit den Phasen Analyse, Entwurf, Implementierung und Test. Die Schwerpunkte liegen im Entwurf auf Systemebene und im Vergleich der Entwicklung von FPGA- und Mikroprozessor-Systemen. Die Arbeit dient auch der technischen und {\"o}kologischen Entscheidungshilfe. Zahlreiche Praxis-Beispiele, -Aufgaben, Einstiegshilfen und Literaturhinweise zur weiteren Vertiefung runden das Werk ab. Der Inhalt Eingebettete Systeme ‒ Rechenmaschinen ‒ Grundlagen Hardware-Architekturen ‒ Eingebettete Architekturen: ARM ‒ Hardware-Software-Codesign ‒ Eingebettete Betriebssysteme ‒ Entwicklungs-Prozesse ‒ Entwurf auf Systemebene ‒ Implementierung ‒ Test ‒ Zahlensysteme und Arithmetik ‒ Auswahlkriterien ‒ Vergleichende Entwicklung ‒ Fallstudien ‒ Trends Die Zielgruppen Studierende der Elektrotechnik, (technischen) Informatik und Ingenieurwissenschaften an Universit{\"a}ten und Hochschulen Professoren und Dozenten mit Vorlesungen in {\glqq}Eingebettete Systeme{\grqq}, {\glqq}Mikroprozessor- und Schaltungstechnik{\grqq} System-, Entwicklungsingenieure sowie Entscheidungstr{\"a}ger der Fachrichtung Eingebettete Systeme Der Autor Prof. Dr.-Ing. Ralf Gessler verf{\"u}gt {\"u}ber zwanzig Jahre Berufserfahrung im Bereich {\glqq}Eingebettete Systeme{\grqq} und lehrt an der Hochschule Heilbronn, Campus K{\"u}nzelsau, RWH K{\"u}nzelsau die F{\"a}cher Mikroprozessor-, Schaltungs- und Nachrichtentechnik in Bachelor- und Master-Studieng{\"a}ngen.},
 author = {Gessler, Ralf},
 year = {2020},
 title = {Entwicklung Eingebetteter Systeme: Vergleich von Entwicklungsprozessen f{\"u}r FPGA- und Mikroprozessor-Systeme Entwurf auf Systemebene},
 address = {Wiesbaden},
 edition = {2. Aufl.},
 publisher = {{Springer Fachmedien}},
 isbn = {9783658305499},
 doi = {10.1007/978-3-658-30549-9}
}


@proceedings{InternationalInstituteofAppliedInformatics.2017,
 year = {2017},
 title = {Proceedings of the 10th International Conference on Applied Informatics},
 publisher = {{Eszterh{\'a}zy K{\'a}roly University}},
 isbn = {9786155621727},
 editor = {{International Institute of Applied Informatics}}
}


@misc{InternationalStandardsOrganization.2018,
 year = {2018},
 title = {ISO 26262-6:2018: Road vehicles - Functional safety - Part 6: Product development at the software level},
 author = {{International Standards Organization}},
url = {https://www.iso.org/standard/68388.html},
}


@misc{ISO.C11.2024,
 abstract = {Information technology --- Programming languages --- C},
 author = {{International Standards Organization}},
 year = {2011},
 title = {ISO/IEC 9899:2011},
 url = {https://www.iso.org/standard/57853.html},
 urldate = {2024-04-15}
}


@misc{ISO.C17.2024,
 abstract = {Information technology --- Programming languages --- C},
 author = {{International Standards Organization}},
 year = {2018},
 title = {ISO/IEC 9899:2018},
 url = {https://www.iso.org/standard/74528.html},
 urldate = {2024-04-15}
}


@misc{ISO.C23.2024,
 abstract = {Information technology --- Programming languages --- C},
 author = {{International Standards Organization}},
 year = {2023},
 title = {ISO/IEC DIS 9899},
 url = {https://www.iso.org/standard/82075.html},
 urldate = {2024-04-15}
}


@misc{ISO.C95.2024,
 abstract = {Programming languages --- C --- Amendment 1: C Integrity},
 author = {{International Standards Organization}},
 year = {1995},
 title = {ISO/IEC 9899:1990/Amd 1:1995},
 url = {https://www.iso.org/standard/23909.html},
 urldate = {2024-04-15}
}


@misc{ISO.C99.2024,
 abstract = {Programming languages --- C},
 author = {{International Standards Organization}},
 year = {1999},
 title = {ISO/IEC 9899:1999},
 url = {https://www.iso.org/standard/29237.html},
 urldate = {2024-04-15}
}


@misc{ISO.CPP03.2024,
 abstract = {Programming languages --- C++},
 author = {{International Standards Organization}},
 year = {2003},
 title = {ISO/IEC 14882:2003},
 url = {https://www.iso.org/standard/38110.html},
 urldate = {2024-04-30}
}


@misc{ISO.CPP11.2024,
 abstract = {Information technology --- Programming languages --- C++},
 author = {{International Standards Organization}},
 year = {2011},
 title = {ISO/IEC 14882:2011},
 url = {https://www.iso.org/standard/50372.html},
 urldate = {2024-04-30}
}


@misc{ISO.CPP14.2024,
 abstract = {Information technology --- Programming languages --- C++},
 author = {{International Standards Organization}},
 year = {2014},
 title = {ISO/IEC 14882:2014},
 url = {https://www.iso.org/standard/64029.html},
 urldate = {2024-04-15}
}


@misc{ISO.CPP17.2024,
 abstract = {Programming languages --- C++},
 author = {{International Standards Organization}},
 year = {2017},
 title = {ISO/IEC 14882:2017},
 url = {https://www.iso.org/standard/68564.html},
 urldate = {2024-04-30}
}


@misc{ISO.CPP20.2024,
 abstract = {Programming languages --- C++},
 author = {{International Standards Organization}},
 year = {2020},
 title = {ISO/IEC 14882:2020},
 url = {https://www.iso.org/standard/79358.html},
 urldate = {2024-04-30}
}


@misc{ISO.CPP2X.2024,
 abstract = {Programming languages --- C++},
 author = {{International Standards Organization}},
 year = {2024},
 title = {ISO/IEC PRF 14882},
 url = {https://www.iso.org/standard/83626.html},
 urldate = {2024-04-30}
}


@misc{ISO.CPP98.2024,
 abstract = {Programming languages --- C++},
 author = {{International Standards Organization}},
 year = {1998},
 title = {ISO/IEC 14882:1998},
 url = {https://www.iso.org/standard/25845.html},
 urldate = {2024-04-30}
}


@misc{jetbrains.c,
 abstract = {Get the latest insights into C trends, including top frameworks, libraries, and tools.},
 author = {{JetBrains s.r.o.}},
 editor = {{JetBrains s.r.o.}},
 year = {2023},
 title = {C Programming - The State of Developer Ecosystem in 2023 Infographic},
 url = {https://www.jetbrains.com/lp/devecosystem-2023/c/},
 urldate = {2024-05-13}
}


@misc{jetbrains.cpp,
 author = {{JetBrains s.r.o.}},
 editor = {{JetBrains s.r.o.}},
 year = {2023},
 title = {C++ Programming - The State of Developer Ecosystem in 2023 Infographic | JetBrains: Developer Tools for Professionals and Teams},
 url = {https://www.jetbrains.com/lp/devecosystem-2023/cpp/},
 urldate = {2024-05-13}
}


@misc{jetbrains.methodology,
 author = {{JetBrains s.r.o.}},
 editor = {{JetBrains s.r.o.}},
 year = {2023},
 title = {Methodology - The State of Developer Ecosystem in 2023 Infographic | JetBrains: Developer Tools for Professionals and Teams},
 url = {https://www.jetbrains.com/lp/devecosystem-2023/methodology/},
 urldate = {2024-05-13}
}


@book{Jimenez.2014,
 abstract = {This textbook serves as an introduction to the subject of embedded systems design, using microcontrollers as core components.  It develops concepts from the ground up, covering the development of embedded systems technology, architectural and organizational aspects of controllers and systems, processor models, and peripheral devices. Since microprocessor-based embedded systems tightly blend hardware and software components in a single application, the book also introduces the subjects of data representation formats, data operations, and programming styles. The practical component of the book is tailored around the architecture of a widely used Texas Instrument's microcontroller, the MSP430. Instructor's supplemental materials available through the book web site include solutions to selected problems and exercises and power point slides for lectures. The site also includes materials for students that include links to application examples and to sites elsewhere in the web with application notes, downloadable tools, and part suppliers.   ·         Provides textbook coverage of embedded systems, with an emphasis on the practical use of microcontrollers; ·         Covers embedded software fundamentals, including software planning, assembly language, and C-language program development; ·         Includes detailed treatment of embedded hardware fundamentals, discussing structure, interfacing and configuration of hardware building blocks; ·         Emphasizes examples and exercises that reflect real applications for embedded systems design; ·         Covers all MSP430 generations up to series x6xx.},
 author = {Couvertier, Isidoro and Jim{\'e}nez, Manuel and Palomera, Rogelio},
 year = {2014},
 title = {Introduction to Embedded Systems: Using Microcontrollers and the MSP430},
 address = {New York},
 publisher = {Springer},
 isbn = {9781461431435},
 doi = {10.1007/978-1-4614-3143-5}
}


@book{Josuttis.2012,
 author = {Josuttis, Nicolai M.},
 year = {2012},
 title = {The C standard library: A tutorial and reference},
 address = {Upper Saddle River},
 edition = {2. Aufl.},
 publisher = {{Addison-Wesley Professional}},
 isbn = {978-0321623218}
}


@book{Kaiser.2021,
 author = {Kaiser, Richard},
 year = {2021},
 title = {C++ mit Visual Studio 2019: C++17 f{\"u}r Studierende und erfahrene Programmierer},
 address = {Berlin and Heidelberg},
 publisher = {{Springer Vieweg}},
 isbn = {978-3-662-59475-9}
}


@book{Kalin.2022,
 abstract = {1. Program Structure -- 2. Basic Data Types -- 3. Aggregates and Pointers -- 4. Storage Classes -- 5. Input and Output -- 6. Networking -- 7. Concurrency and Parallelism -- 8. Miscellaneous Topics.



Learn how to program in modern C, from the basics through the advanced topics required for proficiency. This book is the fastest path to C fluency for anyone experienced in a general-purpose programming language. From start to finish, code examples highlight the idioms and best practices behind efficient, robust programs in a variety of areas. The book opens with a thorough coverage of syntax, built-in data types and operations, and program structure. C has quirks and presents challenges, which are covered in detail. The coverage of advanced features is what sets this book apart from others. Among the advanced topics covered are floating-point representation in the IEEE 754 standard; embedded assembly language in C code for overflow detection; regular expressions, assertions, and internationalization; WebAssembly through C; and software libraries for C and other clients. Memory efficiency and safety are the two major challenges in C programming, and you'll explore these challenges through a series of C examples. Arrays and structures, which are the means to high-level data representation, are covered in connection with pointers, which provide efficiency. The book again uses code examples in covering networking and wire-level security; concurrency (multiprocessing and multithreading); instruction-level parallelism; and interprocess communication through shared memory and files, pipes, message queues, and signals. Many books introduce C, but few also explain how to use it properly and optimally. Essential C does just that. ·.},
 author = {Kalin, Martin},
 year = {2022},
 title = {Modern C Up and Running: A Programmer's Guide to Finding Fluency and Bypassing the Quirks},
 address = {Berkeley},
 publisher = {Apress},
 isbn = {978-1-4842-8675-3},
 doi = {10.1007/978-1-4842-8676-0}
}


@book{Kernighan.1988,
 author = {Kernighan, Brian W. and Ritchie, Dennis M.},
 year = {1988},
 title = {The C programming language},
 address = {Upper Saddle River},
 edition = {2. Aufl.},
 publisher = {Prentice-Hall},
 isbn = {978-0131103627}
}


@book{Kochan.2011,
 abstract = {Presents an introduction to Objective-C, covering such topics as classes and objects, data types, polymorphism, Foundation Framework, memory management, and archiving},
 author = {Kochan, Stephen G.},
 year = {2011},
 title = {Programming in Objective-C: Updated for Xcode 4 and iOS},
 address = {Upper Saddle River},
 edition = {3. Aufl.},
 publisher = {{Addison-Wesley Professional}},
 isbn = {978-0-321-71139-7}
}


@book{Kormanyos.2021,
 author = {Kormanyos, Christopher},
 year = {2021},
 title = {Real-time C++: Efficient object-oriented and template microcontroller programming},
 price = {Festeinband : circa EUR 74.89 (DE) (freier Preis), circa EUR 76.99 (AT) (freier Preis), circa CHF 82.50 (freier Preis), circa EUR 69.99},
 address = {Berlin and Heidelberg},
 edition = {4. Aufl.},
 publisher = {Springer},
 isbn = {978-3-662-62995-6}
}


@book{Lahres.2009,
 abstract = {Das umfassende Grundlagen- und Praxisbuch zu Anwendungsm{\"o}glichkeiten der Objektorientierung bei der Softwareentwicklung, das sich prim{\"a}r an Informatikstudenten und Softwareentwickler mit einschl{\"a}gigem Vorwissen wendet, wurde in dieser Neuauflage nur leicht {\"u}berarbeitet, sodass die Vorauflage (ID 46/06, damals unter dem Titel {\textquotedbl}Praxisbuch Objektorientierung{\textquotedbl}) nicht ersetzt werden muss. Hinzu gekommen ist allerdings ein fast 50 Seiten starkes Praxisbeispiel, in dem die Entwicklung einer modernen Webapplikation mit PHP 5 dargestellt wird. Im einzelnen werden weiterhin die Grundlagen der objektorientierten Programmierung, Polymorphie und Vererbung, Persistenzverfahren, Module und Architektur und aspektorientierte Programmierung behandelt, {\"u}bergreifende Themen wie UML und Design Patterns einbezogen. Bei guter Nutzung des Vorg{\"a}ngers in ausgebauten EDV-Best{\"a}nden zus{\"a}tzlich empfohlen. Stellt eine gute Alternative zu dem didaktisch sehr viel anders konzipierten B. McLaughlin (ID 33/07) dar. Erweitert und aktualisiert knappere Einf{\"u}hrungen wie H. Balzert (BA 5/01). (3)},
 author = {Lahres, Bernhard and Ra{\'y}man, Gregor},
 year = {2009},
 title = {Objektorientierte Programmierung: Das umfassende Handbuch ; objektorientierte Programmierung verst{\"a}ndlich erkl{\"a}rt ; von den Prinzipien {\"u}ber den Entwurf bis zur Umsetzung ; Praxisbeispiele in UML, Java, C{\#}, C++, JavaScript, Ruby, Python und PHP},
 price = {GB. : EUR 49.90, EUR 51.30 (AT), sfr 83.90 (freier Pr.)},
 address = {Bonn},
 edition = {2. Aufl.},
 publisher = {{Galileo Press}},
 isbn = {978-3836214018}
}


@misc{Matlab.2024,
 abstract = {Simulink ist eine auf Blockdiagrammen basierende Umgebung f{\"u}r das Model-Based Design. Es unterst{\"u}tzt die Simulation, die automatische Codegenerierung und das durchg{\"a}ngige Testen eingebetteter Systeme.},
 author = {{The MathWorks Inc.}},
 editor = {{The MathWorks, Inc.}},
 year = {o.Jahr},
 title = {Simulink -- Simulation und Model-Based Design},
 url = {https://de.mathworks.com/products/simulink.html},
 urldate = {2024-05-02}
}


@misc{Muller.2023,
 abstract = {Learn all the basics of C++'s build model a.k.a. separate compilation of source files and the basics of the preprocessor.},
 author = {M{\"u}ller, Andr{\'e}},
 year = {2019},
 title = {C++ Separate Compilation Introduction},
 url = {https://hackingcpp.com/cpp/lang/separate_compilation.html},
 urldate = {2024-06-04}
}


@incollection{Nahas.2012,
 author = {Nahas, Mouaaz and Maait, Adi},
 title = {Choosing Appropriate Programming Language to Implement Software for Real-Time Resource- Constrained Embedded Systems},
 publisher = {InTech},
 isbn = {978-953-51-0167-3},
 editor = {Tanaka, Kiyofumi},
 booktitle = {Embedded Systems - Theory and Design Methodology},
 year = {2012},
 doi = {10.5772/38167}
}


@book{Nahrstedt.2009,
 abstract = {C++ ist eine standardisierte objektorientierte Programmiersprache. Umfassende Darstellungen sind D. Louis (BA 6/08), U. Kaiser (BA 2/08) oder U. Breymann (ID 31/09). Besonders f{\"u}r Anf{\"a}nger ist A. Willms (BA 6/08) geeignet. Das vorliegende Buch spricht ganz gezielt Ingenieure an; dies zeigen die Angabe der Zielgruppe auf dem Buchr{\"u}cken {\textquotedbl}Ingenieure und Techniker, die technische Fragestellungen mithilfe von eigenen Programmen l{\"o}sen wollen{\textquotedbl} und die zahlreichen Anwendungsbeispiele aus dem Maschinenbau. Die Erstellung der Programme erfolgt mit einem Freeware-Entwicklungswerkzeug der Firma Bloodshed Software. Am Anfang des Buches werden Grundlagen des Programmierens behandelt (Datentypen, Operatoren, Anweisungen, ...). Es folgen zwei k{\"u}rzere Abschnitte {\"u}ber prozedurale und modulare Programmierung. Sehr ausf{\"u}hrlich widmet das Buch sich dann der objektorientierten Programmierung. Viele praxisnahe {\"U}bungen, Abbildungen und Tabellen. Der Autor legt bewusst Wert auf einfache Strukturen und Programme. Elegante Tricks stellen sich seiner Meinung nach bei intensiverer Nutzung von selbst ein. (3)},
 author = {Nahrstedt, Harald},
 year = {2009},
 title = {C++ f{\"u}r Ingenieure: Effizient Programmieren erlernen ; mit 70 Tabellen},
 price = {Pb. : EUR 27.90},
 address = {Wiesbaden},
 publisher = {Vieweg and Teubner},
 isbn = {978-3-8348-0464-8}
}


@book{ORegan.2018,
 abstract = {This encyclopedic reference provides a concise and engaging overview of the groundbreaking inventions and conceptual innovations that have shaped the field of computing, and the technology that runs the modern world. Each alphabetically-ordered entry presents a brief account of a pivotal innovation and the great minds behind it, selected from a wide range of diverse topics. Topics and features: Describes the development of Babbage's computing machines, Leibniz's binary arithmetic, Boole's symbolic logic, and Von Neumann architecture Reviews a range of historical analog and digital computers, significant mainframes and minicomputers, and pioneering home and personal computers Discusses a selection of programming languages and operating systems, along with key concepts in software engineering and commercial computing Examines the invention of the transistor, the integrated circuit, and the microprocessor Relates the history of such developments in personal computing as the mouse, the GUI, Atari video games, and Microsoft Office Surveys innovations in communications, covering mobile phones, WiFi, the Internet and World Wide Web, e-commerce, smartphones, social media, and GPS Presents coverage of topics on artificial intelligence, the ATM, digital photography and digital music, robotics, and Wikipedia Contains self-test quizzes and a helpful glossary This enjoyable compendium will appeal to the general reader curious about the intellectual milestones that led to the digital age, as well as to the student of computer science seeking a primer on the history of their field. Dr. Gerard O'Regan is a CMMI software process improvement consultant with research interests including software quality and software process improvement, mathematical approaches to software quality, and the history of computing. He is the author of such Springer titles as World of Computing, Concise Guide to Formal Methods, Concise Guide to Software Engineering, and Guide to Discrete Mathematics



Background -- ABC Computer -- Ada Programming Language -- Agile Methodology -- Amdahl 470 and 580 -- Analytic and Difference Engines -- Apple II and Macintosh -- Intelligence and Applications -- Atari Video Games -- Automated Teller Machine -- AXE System -- Binary Number System -- Boolean Algebra and Digital Computing -- C and C++ Programming Languages -- Cloud Computing and Distributed Systems -- CMMI and Software Process Improvement -- Colossus and Code Breaking at Bletchley Park -- Commodore PET and 64 -- COBOL and Compilers -- Databases -- DEC PDP 11 and VAX 11/780 Minicomputers -- Digital Photography -- EDVAC and ENIAC Computers -- Eliza Program -- Email Communication -- E-Commerce -- Formal Methods -- GPS System -- Graphical User Interface and Human Computer Interaction -- Harvard Mark I Computer -- Hollerith's Tabulating Machine and the birth of IBM -- Integrated Circuits -- Internet -- Iridium System -- Java Programming Language -- LEO Computers -- Manchester Baby and Mark I Computers -- Microprocessor -- Mobile Phone -- Mouse -- Player and Digital Music -- MS/DOS Operating System -- Office Software -- Open Source Software -- Object-Oriented Paradigm -- Personal and Home Computers -- Robotics -- Smartphones and Social Media -- Software Inspections -- Software Lifecycles -- The System/360 Revolution -- Transistor -- UNIX Operating System -- Von Neumann Architecture -- WiFi Technology --  -- World Wide Web -- and Z4 Computers -- Epilogue},
 author = {O'Regan, Gerard},
 year = {2018},
 title = {The Innovation in Computing Companion: A Compendium of Select, Pivotal Inventions},
 address = {Cham},
 publisher = {{Springer International Publishing}},
 isbn = {978-3-030-02618-9},
 doi = {10.1007/978-3-030-02619-6}
}


@inproceedings{Renwick.2019,
 author = {Renwick, James and Spink, Tom and Franke, Bj{\"o}rn},
 title = {Low-cost deterministic C++ exceptions for embedded systems},
 pages = {76--86},
 publisher = {ACM},
 isbn = {9781450362771},
 editor = {Amaral, J. Nelson and Kulkarni, Milind},
 booktitle = {Proceedings of the 28th International Conference on Compiler Construction},
 year = {2019},
 address = {New York},
 doi = {10.1145/3302516.3307346}
}


@incollection{Ritchie.1996,
 author = {Ritchie, Dennis M.},
 title = {The development of the C programming language},
 pages = {671--698},
 publisher = {{Addison-Wesley Professional}},
 isbn = {0201895021},
 editor = {Bergin, Thomas J. and Gibson, Richard G.},
 booktitle = {History of programming languages II},
 year = {1996},
 address = {New York},
 doi = {10.1145/234286.1057834}
}


@article{Saavedra.1996,
 author = {Saavedra, Rafael H. and Smith, Alan J.},
 year = {1996},
 title = {Analysis of benchmark characteristics and benchmark performance prediction},
 pages = {344--384},
 volume = {14},
 number = {4},
 journal = {ACM Transactions on Computer Systems},
 doi = {10.1145/235543.235545}
}


@book{Schauffele.2024,
 abstract = {Gesamtsystem Fahrer-Fahrzeug-Umwelt -- Grundlagen -- Prozesse zur Entwicklung von elektronischen Systemen und Software -- Methoden und Werkzeuge f{\"u}r die Entwicklung, die Produktion und den Service elektronischer Systeme.



Dieses Fachbuch enth{\"a}lt die Grundlagen sowie zahlreiche Anregungen und praktische Beispiele zu Prozessen, Methoden und Werkzeugen, die zur sicheren Beherrschbarkeit von elektronischen Systemen und Software im Fahrzeug und im IT Backend beitragen. Dabei werden der AUTOSAR Classic und der AUTOSAR Adaptive Standard behandelt. Die aktuelle Auflage ber{\"u}cksichtigt neben der signalorientierten Kommunikation auch die serviceorientierte Kommunikation sowie die aktuellen Trends bei E/E-Architekturen. Dazu geh{\"o}ren Zonenarchitekturen, High Performance Computer mit unterschiedlichen Software-Plattformen sowie Themen wie Vehicle Operating System und Software-definierte Fahrzeuge. Seit Anfang der 1970er Jahre ist die Entwicklung von Kraftfahrzeugen gepr{\"a}gt von einem rasanten Anstieg des Einsatzes von Elektronik und Software. Dieser Trend h{\"a}lt bis heute an und wird getrieben von steigenden Kunden- und Umweltanforderungen. Nahezu alle Funktionen des Fahrzeugs werden inzwischen elektronisch gesteuert, geregelt oder {\"u}berwacht. Die Realisierung von Funktionen durch Software bietet einzigartige Freiheitsgrade beim Entwurf. In der Fahrzeugentwicklung m{\"u}ssen jedoch Randbedingungen wie hohe Zuverl{\"a}ssigkeits- und Sicherheitsanforderungen, lange Produktlebenszyklen, begrenzte Kostenrahmen, k{\"u}rzere Entwicklungszeiten und zunehmende Variantenvielfalt ber{\"u}cksichtigt werden. In diesem Spannungsfeld steht Automotive Software Engineering. Der Inhalt Gesamtsystem Fahrer-Fahrzeug-Umwelt.- Grundlagen.- Prozesse zur Entwicklung von elektronischen Systemen und Software.- Methoden und Werkzeuge f{\"u}r die Entwicklung, die Produktion und den Service elektronischer Systeme. Die Zielgruppen Mitarbeiter von Fahrzeugherstellern und Zulieferern, die sich mit elektronischen Systemen und Software im Fahrzeug besch{\"a}ftigen - Studierende der Informatik, der Elektrotechnik oder des Maschinenbaus mit Schwerpunkten Automotive Software Engineering, Steuerungs- und Regelungstechnik, Mechatronik oder Fahrzeugtechnik an Universit{\"a}ten und Hochschulen. Die Autoren Dipl.-Ing. J{\"o}rg Sch{\"a}uffele ist Product Area Manager bei der Vector Informatik GmbH. Dr.-Ing. Thomas Zurawka war langj{\"a}hriger Gesch{\"a}ftsf{\"u}hrer der ETAS GmbH sowie leitender Direktor der Robert Bosch GmbH. Er ist Gesellschafter und Gesch{\"a}ftsf{\"u}hrer der SYSTECS Informationssysteme GmbH. .},
 author = {Sch{\"a}uffele, J{\"o}rg and Zurawka, Thomas},
 year = {2024},
 title = {Automotive Software Engineering: Grundlagen, Prozesse, Methoden und Werkzeuge},
 address = {Wiesbaden},
 edition = {7. Aufl.},
 publisher = {{Springer Vieweg}},
 isbn = {978-3-658-43542-4},
 doi = {10.1007/978-3-658-43543-1}
}


@book{Sharma.09.11.2023,
 abstract = {Embedded software is used in safety-critical systems such as medical devices and autonomous vehicles, where software defects, including security vulnerabilities, have severe consequences. Most embedded codebases are developed in unsafe languages, specifically C/C++, and are riddled with memory safety vulnerabilities. To prevent such vulnerabilities, RUST, a performant memory-safe systems language, provides an optimal choice for developing embedded software. RUST interoperability enables developing RUST applications on top of existing C codebases. Despite this, even the most resourceful organizations continue to develop embedded software in C/C++. This paper performs the first systematic study to holistically understand the current state and challenges of using RUST for embedded systems. Our study is organized across three research questions. We collected a dataset of 2,836 RUST embedded software spanning various categories and 5 Static Application Security Testing ( SAST) tools. We performed a systematic analysis of our dataset and surveys with 225 developers to investigate our research questions. We found that existing RUST software support is inadequate, SAST tools cannot handle certain features of RUST embedded software, resulting in failures, and the prevalence of advanced types in existing RUST software makes it challenging to engineer interoperable code. In addition, we found various challenges faced by developers in using RUST for embedded systems development.},
 author = {Sharma, Ayushi and Sharma, Shashank and Torres-Arias, Santiago and Machiry, Aravind},
 date = {09.11.2023},
 title = {Rust for Embedded Systems: Current State, Challenges and Open Problems},
 file = {Sharma, Sharma et al. 09.11.2023 - Rust for Embedded Systems:Attachments/Sharma, Sharma et al. 09.11.2023 - Rust for Embedded Systems.pdf:application/pdf},
 year = {2023},
 address = {Purdue}
}


@misc{stepstone.c,
 abstract = {Welches Gehalt verdient man im Bereich C Developer? Finden Sie heraus, was Sie mit Ihrer Berufserfahrung im Bereich C Developer verdienen k{\"o}nnen.},
 author = {stepstone.de},
 editor = {{The Stepstone Group Deutschland GmbH}},
 year = {2024},
 title = {C Developer Geh{\"a}lter in Deutschland 2024 - StepStone},
 url = {https://www.stepstone.de/gehalt/C-Developer.html},
 urldate = {2024-05-25}
}


@misc{stepstone.cpp,
 abstract = {Geh{\"a}lter 2024 im Bereich  ✓ Durchschnittsgeh{\"a}lter ✓ Unterschiede nach Region/Stadt ✓ offene Stellen},
 author = {stepstone.de},
 editor = {{The Stepstone Group Deutschland GmbH}},
 year = {2024},
 title = {Software Developer C++ Geh{\"a}lter in Deutschland 2024 - StepStone},
 url = {https://www.stepstone.de/gehalt/Software-Developer-C.html},
 urldate = {2024-05-25}
}


@book{Stevanovic.2014,
 abstract = {Up-to-date resource on expert-level C/C++ compiling issues Elegantly bridges the gap between theory and practice Includes coverage of both Linux and Windows tools.



Intro -- Advanced C and C++ Compiling -- Contents at a Glance -- Contents -- About the Author -- About the Technical Reviewers -- Acknowledgment -- Introduction -- Chapter 1: Multitasking OS Basics -- Useful Abstractions -- Memory Hierarchy and Caching Strategy -- Virtual Memory -- Virtual Addressing -- Process Memory Division Scheme -- The Roles of Binaries, Compiler, Linker, and Loader -- Summary -- Chapter 2: Simple Program Lifetime Stages -- Initial Assumptions -- Code Writing -- Concept illustration: Demo Project -- Compiling -- Introductory Definitions -- Related Definitions -- The Stages of Compiling -- Preprocessing -- Demo Project Preprocessing Example -- Linguistic Analysis -- Assembling -- Demo Project Assembling Example -- AT{\&}T Assembly Format Example -- Intel Assembly Format Example -- Optimization -- Code Emission -- Demo Project Compiling Example -- Object File Properties -- Compilation Process Limitations -- What Makes Section Combining so Complicated? -- Linking -- Linking Stages -- Relocation -- Resolving References -- Demo Project Linking Example -- Linker's Viewpoint -- Executable File Properties -- Variety of Section Types -- A Variety of Symbol Types -- Chapter 3: Program Execution Stages -- Importance of the Shell -- Kernel Role -- Loader Role -- Loader-Specific View of a Binary File (Sections vs. Segments) -- Program Loading Stage -- Executing Program Entry Point -- The Loader Finds the Entry Point -- The Role of {\_}start() Function -- The Role of {\_}{\_}libc{\_}start{\_}main() Function -- Stack and Calling Conventions -- Functions Calling Conventions -- Chapter 4: The Impact of Reusing Concept -- Static Libraries -- Dynamic Libraries -- Dynamic vs. Shared Libraries -- Dynamic Linking in More Detail -- Part 1: Building the Dynamic Library -- Part 2: Playing by Trust While Building the Client Executable (Looking for the Symbols Only).},
 author = {Stevanovic, Milan},
 year = {2014},
 title = {Advanced C and C++ Compiling},
 address = {Berkeley},
 publisher = {Apress},
 isbn = {9781430266686}
}


@inproceedings{Stroustrup.1986,
 author = {Stroustrup, Bjarne},
 title = {An overview of C++},
 pages = {7--18},
 publisher = {{ACM Press}},
 isbn = {0897912055},
 editor = {Wegner, Peter and Shriver, Bruce},
 booktitle = {Proceedings of the 1986 SIGPLAN workshop on Object-oriented programming},
 year = {1986},
 address = {New York},
 doi = {10.1145/323779.323736}
}


@incollection{Stroustrup.1996,
 author = {Stroustrup, Bjarne},
 title = {A history of C++},
 pages = {699--769},
 publisher = {{Addison-Wesley Professional}},
 isbn = {0201895021},
 editor = {Bergin, Thomas J. and Gibson, Richard G.},
 booktitle = {History of programming languages II},
 year = {1996},
 address = {New York},
 doi = {10.1145/234286.1057836}
}


@article{Stroustrup.2002.CCS,
 abstract = {We're at a crossroads for compatibility between C and

C++. Can siblings go their separate ways and still

remain on speaking terms? In this first of three parts,

Bjarne provides context for the discussion.},
 author = {Stroustrup, Bjarne},
 year = {2002},
 title = {C and C++: Siblings},
 pages = {28, 30, 32--36},
 volume = {20},
 number = {7},
 issn = {1075-2838},
 journal = {C/C++ Users Journal}
}


@book{Stroustrup.2023,
 author = {Stroustrup, Bjarne},
 year = {2023},
 title = {Tour of C++},
 address = {Boston},
 edition = {3. Aufl.},
 publisher = {{Addison-Wesley Professional}},
 isbn = {9780136823544}
}


@inproceedings{Szalay.2017,
 author = {Szalay, Rich{\'a}rd and Porkol{\'a}b, Zolt{\'a}n and Krupp, D{\'a}niel},
 title = {Symbol Clustering: Resolving ambiguous symbol references of large-scale C/C++ projects based on linkage information},
 pages = {271--278},
 publisher = {{Eszterh{\'a}zy K{\'a}roly University}},
 isbn = {9786155621727},
 editor = {{International Institute of Applied Informatics}},
 booktitle = {Proceedings of the 10th International Conference on Applied Informatics},
 year = {2017},
 doi = {10.14794/ICAI.10.2017.271}
}


@book{Tanaka.2012,
 year = {2012},
 title = {Embedded Systems - Theory and Design Methodology},
 publisher = {InTech},
 isbn = {978-953-51-0167-3},
 editor = {Tanaka, Kiyofumi},
 doi = {10.5772/2339}
}


@misc{Targetlink.2024,
 abstract = {Production code generation for ECUs, automatically and directly from Simulink{\circledR}/Stateflow{\circledR}},
 author = {{dSPACE GmbH}},
 editor = {{dSPACE GmbH}},
 year = {o.Jahr},
 title = {TargetLink},
 url = {https://www.dspace.com/en/pub/home/products/sw/pcgs/targetlink.cfm},
 urldate = {2024-05-02}
}


@misc{TIOBE.2024,
 author = {{TIOBE Software BV}},
 editor = {{TIOBE Software BV}},
 year = {2024},
 title = {TIOBE Index - TIOBE},
 url = {https://www.tiobe.com/tiobe-index/},
 urldate = {2024-06-03}
}


@proceedings{Wegner.1986,
 year = {1986},
 title = {Proceedings of the 1986 SIGPLAN workshop on Object-oriented programming},
 address = {New York},
 publisher = {{ACM Press}},
 isbn = {0897912055},
 editor = {Wegner, Peter and Shriver, Bruce},
 doi = {10.1145/323779}
}


@book{White.2012,
 abstract = {Interested in developing embedded systems? Since they don't tolerate inefficiency, these systems require a disciplined approach to programming. This easy-to-read guide helps you cultivate a host of good development practices, based on classic software design patterns and new patterns unique to embedded programming. Learn how to build system architecture for processors, not operating systems, and discover specific techniques for dealing with hardware difficulties and manufacturing requirements. Written by an expert who's created embedded systems ranging from urban surveillance and DNA scanners to children's toys, this book is ideal for intermediate and experienced programmers, no matter what platform you use. Optimize your system to reduce cost and increase performance Develop an architecture that makes your software robust in resource-constrained environments Explore sensors, motors, and other I/O devices Do more with less: reduce RAM consumption, code space, processor cycles, and power consumption Learn how to update embedded code directly in the processor Discover how to implement complex mathematics on small processors Understand what interviewers look for when you apply for an embedded systems job {\textquotedbl}Making Embedded Systems is the book for a C programmer who wants to enter the fun (and lucrative) world of embedded systems. It's very well written--entertaining, even--and filled with clear illustrations.{\textquotedbl} --Jack Ganssle, author and embedded system expert.},
 author = {White, Elecia},
 year = {2012},
 title = {Making embedded systems: Design patterns for great software},
 address = {Beijing and Cambridge and Farnham and K{\"o}ln and Sebastopol and Tokyo},
 publisher = {O'Reilly},
 isbn = {9781449320591}
}


@book{Wietzke.2005,
 author = {Wietzke, Joachim and Tran, Manh Tien},
 year = {2005},
 title = {Automotive Embedded Systeme: Effizientes Framework ; vom Design zur Implementierung},
 price = {Gb. : EUR 69.95},
 address = {Berlin and Heidelberg},
 publisher = {Springer},
 isbn = {978-3-540-24339-7}
}


@booklet{zf.bsw.interview,
 abstract = {ZF Friedrichshafen AG: Interview mit Basissoftware Team},
 author = {{ZF Basissoftware Team}},
 date = {2024},
 title = {Gespr{\"a}ch am 29.04.2024}
}


@booklet{zf.tools.interview,
 abstract = {ZF Friedrichshafen AG: Interview mit Tools {\&} Methoden Team},
 author = {{ZF Tools {\&} Methoden Team}},
 date = {2024},
 title = {Gespr{\"a}ch am 29.04.2024}
}


@misc{ZF.VCM.03.04.2024,
 abstract = {A range of intelligent control units deliver solutions for the vehicle's electronic architecture.},
 author = {{ZF Friedrichshafen AG}},
 editor = {{ZF Friedrichshafen AG}},
 year = {2024},
 title = {Vehicle Electronic Systems},
 url = {https://www.zf.com/products/en/cv/products_64322.html},
 urldate = {2024-04-10}
}


